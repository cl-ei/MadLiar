{
    "category": "学习笔记", 
    "layout": "post", 
    "description": "MySQL的常用操作", 
    "tags": [
        "MySQL"
    ], 
    "title": "MySQL(1):常用操作", 
    "first_figure": "/static/blog/img/blog/20170127/0.jpg", 
    "content": "\n## MySQL的常用操作\n\n1、DDL，数据定义语句\n\n定义数据段、数据库、表、列、索引等数据库对象。\n```\ncreate\ndrop\nalter\n```\n\n2、DML，数据操纵语句\n\n添加、删除、更新、查询。\n```\ninsert\ndelete\nupdate\nselect\n```\n3、DCL，数据控制控制\n\n定义安全和权限级别。\n```\ngrant\nrevoke\n```\n### 一、DDL\n\n1、查看数据库\n\n```\nSHOW DATABASES\n```\n\n2、查看表的列表\n\n```\nSHOW TABLES \nSHOW TABLES FROM db_name\n```\n\n3、创建数据库\n\n```\nCREATE DATABASE db_name\n```\n\n4、删除数据库\n\n```\nDROP DATABASE db_name\t\n```\n\n5、选择操作的数据库\n\n```\nUSE db_name\n```\n\n6、创建表\n\n```\nCREATE TABLE tb_name(\n\tcolumn_name_1\tcolumn_type_1\tconstraints,\n\t #项名称\t\t\t项数据类型\t\t约束条件\n\t ...\n\tcolumn_name_n\tcolumn_type_n\tconstraints\n)\n```\n\n7、查看表的定义(项目)\n\n```\nDESC tb_name\n```\n\n8、删除表\n\n```\nDROP TABLE tb_name\n```\n\n9、重定义表项类型\n\n```\nALTER TABLE tb_name MODIFY column column_define [FIRST / AFTER col_name]\t\t\n```\n\n例如：将表user_info的user_name列的数据类型改为varchar(20)\n\n```\nALTER TABLE user_info MODIFY user_name varchar(20)\n```\n\n10、增加表字段(项)\n\n```\nALTER TABLE tb_name ADD col_name col_define [ FIRST / AFTER col_name ]\n```\n\n例如：在表 user_info 的 user_name 项之后，增加一项 user_age\n\n```\nALTER TABLE user_info MODIFY user_age int(2) AFTER user_name\n```\n\n11、删除表字段(项)\n\n```\nALTER TABLE tb_name DROP col_name\n```\n\n12、字段更名\n\n```\nALTER TABLE tb_name CHANGE old_col_name new_col_name col_define\n```\n\n13、修改排序,参见“重定义表类型”\n\n只要表项的名称、定义为变，通过最后一个可选参数[FIRST / AFTER col_name]来指定顺序。\n\n```\nALTER TABLE tb_name MODIFY column column_define [FIRST / AFTER col_name]\n```\n14、更改表名称\n\n```\nALTER TABLE tb_name RENAME new_tb_name\n```\n\n### 二、DML\n\n1、查看记录\n\n```\nSELECT * FROM tb_name\n```\n\n2、插入记录\n\n(1)插入一行\n\n```\nINSERT INTO tb_name(field_1,field_2...) VALUES(var_1,var_2...) \n```\n\n例如，表main_info 插入一条记录。某些项允许为NULL时可以跳过。\n\n```\nINSERT INTO main_info(name,age,birthday) VALUES('caoliang',24,'1992-01-01');\n```\n\n不指定名称时，VALUES的序列要和表定义相匹配。\n如表main_info:\n\n```\nmysql> desc main_info;\n+----------+-------------+------+-----+---------+-------+\n| Field    | Type        | Null | Key | Default | Extra |\n+----------+-------------+------+-----+---------+-------+\n| name     | varchar(10) | YES  |     | NULL    |       |\n| age      | int(2)      | YES  |     | NULL    |       |\n| birthday | date        | YES  |     | NULL    |       |\n| workyear | int(2)      | YES  |     | NULL    |       |\n+----------+-------------+------+-----+---------+-------+\n```\n\n可以使用：\n```\nINSERT INTO main_info VALUES('zhangsan',30,'1992-01-01',5);\n```\n\n(2)插入多行\n\n```\nINSERT INTO tb_name(field_1,field_2...) \nVALUES\n(recd_1_var_1,recd_1_var_2...),\n(recd_2_var_1,recd_2_var_2...),\n(recd_3_var_1,recd_3_var_2...),\n...\n```\n每一条记录值后面有逗号分隔。\n\n2、更新记录(更改记录的值)\n\n```\nUPDATE tb_name SET field_1=var_1,field_2=var_2 ... [ WHERE CONDITION]\n```\nWHERE CONDITION为更新的条件，如改变下面的数据库张三的id改为0\n\n```\nmysql> select * from main_info;\n+------+----------+------+------------+----------+\n| id   | name     | age  | birthday   | workyear |\n+------+----------+------+------------+----------+\n| NULL | zhangsan |   30 | 1992-01-01 |        5 |\n|    1 | caoliang | NULL | 1993-01-01 |     NULL |\n+------+----------+------+------------+----------+\n\nmysql> update main_info set id=0 where name='zhangsan';\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from main_info;                        \n+------+----------+------+------------+----------+\n| id   | name     | age  | birthday   | workyear |\n+------+----------+------+------------+----------+\n|    0 | zhangsan |   30 | 1992-01-01 |        5 |\n|    1 | caoliang | NULL | 1993-01-01 |     NULL |\n+------+----------+------+------------+----------+\n```\n\nupdate 命令可以改变多条记录的值。例如：\n\n```\nUPDATE main_info addi_info SET main_info.id = addi_info.cxid WHERE main_info.age = 12\n```\n\n3、删除记录\n\n```\nDELETE FROM tb_name WHERE condition\n```\n\n如上面的数据库，删除张三：\n\n```\nDELETE a FROM main_info a WHERE a.name='zhangsan';\n```\n\na为main_info的别名。另外，如果不加附加条件去执行```DELETE FROM tb_name;```会清空整个表，此操作较为危险。\n\n\t\n\n\n\n\n\t\n", 
    "create_time": "2015年1月10日", 
    "preview": "\n## MySQL的常用操作\n\n1、DDL，数据定义语句\n\n定义数据段、数据库、表、列、索引等数据库对象。\n```\ncreate\ndrop\nalter\n```\n\n2、DML，数据操纵语句\n\n添加、删除、更新、查询。\n```\ninsert\ndelete\nupdate\nselect\n```\n3、DCL，数据控制控制\n\n定义安全和权限级别。\n```\ngrant\nrevoke\n```\n### 一、DDL\n\n1、查看数据库\n\n```\nSHOW DATABASES\n```\n\n2、查看表的列表\n\n```\nSHOW TABLES \nSHOW TABLES FROM db_name\n```\n\n3、创建数据库\n\n```\nCREATE DATABASE db_name\n```\n\n4、删除数据库\n\n```\nDROP DATABASE db_name\t\n```\n\n5、选择操作的数据库\n\n```\nUSE db_name\n```\n\n6、创建表\n\n```\nCREATE TABLE tb_name(\n\tcolumn_name_1\tcolumn_type_1\tconstraints,\n\t #项名称\t\t\t项数据类型\t\t约束条件\n\t ...\n\tcolumn_name_n\tcolumn_type_n\tconstraints\n)\n```\n\n7、查看表的定义(项目)\n\n```\nDESC tb_name\n```\n\n8、删除表\n\n```\nDROP TABLE tb_name\n```\n\n9、重定义表项类型\n\n```\nALTER TABLE tb_name MODIFY column column_define [FIRST / AFTER col_name]\t\t\n```\n\n例如：将表user_info的user_name列的数据类型改为varchar(20)\n\n```\nALTER TABLE user_info MODIFY user_name varchar(20)\n```\n\n10、增加表字段(项)\n\n```\nALTER TABLE tb_name ADD col_name col_define [ FIRST / AFTER col_name ]\n```\n\n例如：在表 user_info 的 user_name 项之后，增加一项 user_age\n\n```\nALTER TABLE user_info MODIFY user_age int(2) AFTER user_name\n```\n\n11、删除表字段(项)\n\n```\nALTER TABLE tb_name DROP col_name\n```\n\n12、字段更名\n\n```\nALTER TABLE tb_name CHANGE old_col_name new_col_name col_define\n```\n\n13、修改排序,参见“重定义表类型”\n\n只要表项的名称、定义为变，通过最后一个可选参数[FIRST / AFTER col_name]来指定顺序。\n\n```\nALTER TABLE tb_name MODIFY column column_define [FIRST / AFTER col_name]\n```\n14、更改表名称\n\n```\nALTER TABLE tb_name RENAME new_tb_name\n```\n\n### 二、DML\n\n1、查看记录\n\n```\nSELECT * FROM tb_name\n```\n\n2、插入记录\n\n(1)插入一行\n\n```\nINSERT INTO tb_name(field_1,field_2...) VALUES(var_1,var_2...) \n```\n\n例如，表main_info 插入一条记录。某些项允许为NULL时可以跳过。\n\n```\nINSERT INTO main_info(name,age,birthday) VALUES('caoliang',24,'1992-01-01');\n```\n\n不指定名称时，VALUES的序列要和表定义相匹配。\n如表main_info:\n\n```\nmysql> desc main_info;\n+----------+-------------+------+-----+---------+-------+\n| Field    | Type        | Null | Key | Default | Extra |\n+----------+-------------+------+-----+---------+-------+\n| name     | varchar(10) | YES  |     | NULL    |       |\n| age      | int(2)      | YES  |     | NULL    |       |\n| birthday | date        | YES  |     | NULL    |       |\n| workyear | int(2)      | YES  |     | NULL    |       |\n+----------+-------------+------+-----+---------+-------+\n```\n\n可以使用：\n```\nINSERT INTO main_info VALUES('zhangsan',30,'1992-01-01',5);\n```\n\n(2)插入多行\n\n```\nINSERT INTO tb_name(field_1,field_2...) \nVALUES\n(recd_1_var_1,recd_1_var_2...),\n(recd_2_var_1,recd_2_var_2...),\n(recd_3_var_1,recd_3_var_2...),\n...\n```\n每一条记录值后面有逗号分隔。\n\n2、更新记录(更改记录的值)\n\n```\nUPDATE tb_name SET field_1=var_1,field_2=var_2 ... [ WHERE CONDITION]\n```\nWHERE CONDITION为更新的条件，如改变下面的数据库张三的id改为0\n\n```\nmysql> select * from main_info;\n+------+----------+------+------------+----------+\n| id   | name     | age  | birthday   | workyear |\n+------+----------+------+------------+----------+\n| NULL | zhangsan |   30 | 1992-01-01 |        5 |\n|    1 | caoliang | NULL | 1993-01-01 |     NULL |\n+------+----------+------+------------+----------+\n\nmysql> update main_info set id=0 where name='zhangsan';\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> select * from main_info;                        \n+------+----------+------+------------+----------+\n| id   | name     | age  | birthday   | workyear |\n+------+----------+------+------------+----------+\n|    0 | zhangsan |   30 | 1992-01-01 |        5 |\n|    1 | caoliang | NULL | 1993-01-01 |     NULL |\n+------+----------+------+------------+----------+\n```\n\nupdate 命令可以改变多条记录的值。例如：\n\n```\nUPDATE main_info addi_info SET main_info.id = addi_info.cxid WHERE main_info.age = 12\n```\n\n3、删除记录\n\n```\nDELETE FROM tb_name WHERE condition\n```\n\n如上面的数据库，删除张三：\n\n```\nDELETE a FROM main_info a WHERE a.name='zhangsan';\n```\n\na为main_info的别名。另外，如果不加附加条件去执行```DELETE FROM tb_name;```会清空整个表，此操作较为危险。\n\n\t\n\n\n\n\n\t\n", 
    "id": 20150110
}