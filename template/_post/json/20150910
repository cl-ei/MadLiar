{
    "category": "学习笔记", 
    "layout": "post", 
    "description": "从另一个角度探讨C语言", 
    "title": "C的陷阱", 
    "first_figure": "/static/blog/img/blog/20170127/0.jpg", 
    "content": "\n![C](/static/blog/img/project/20150910/2015091001.jpg)\n\n　　尽管C语言作为绝大多数开发者学习的第一门编程语言，但它非常难以掌握是一个不争的事实。抛开高深精妙的指针、结构体等用法不谈，单是最基础的数据的操作，也暗藏诸多陷阱。下面简单总结一些易犯的错误和解决办法。\n<!--more-->\n##1、数据类型与赋值\n\n　　（1）未赋予初值的变量，它的值是多少？答案是取决于变量定义的位置。在程序代码调入内存时，如果变量被调入堆中，那么初始值为0。而如果在栈中，它的值为随机值。总结就是：**全局变量未赋初值，它的值为0，静态static变量也是如此。而未赋初值的局部变量，它的值是随机的。**\n在Visual Stidio 2015的编译环境下，如果在变量使用之前未赋予初值，将会报告一个错误，明确指出该错误。\n\n　　（2）给一个结构体的部分元素赋值，那么另一部分的元素的值是多少？仍然与（1）所述的情况相同，**取决于结构体实例化的位置。**\n\n　　（3）**给无符号型的变量赋予一个负值，相当于该变量能表示的最大值加1，再加上这个负值。**比如\n```\nunsigned char a = -1;\t\n\t// 相当于unsigned char a = 0 - 1; 0000 0000b - 1 = 1111 1111b \n\t// a 的值为255 \n```\n　　那么，给无符号型的变量赋予一个负值，且该值的绝对值超过该变量所能表示的范围，会发生什么事呢？\n经过验证，给上述的无符号的char型变量a赋予-257时，a的值为1;当为-258时，a的值为2……可以得知：\n\n　　**给无符号型变量b赋值任意值a，且该无符号型变量b能表示的最大数为m，相当于```b = (m + 1) + ( a % (m + 1) );```。**\n\n　　（4）符号位扩展：**将一个无符号char型变量转换成int型变量，直接在高位填充0。若为有符号char，则int变量的第8位至第32位均为符号位。**\n\n　　（5）**局部变量和全局变量是可以重名的，而且一般来说在某个函数体内，局部变量是会覆盖全局变量。**\n\n##2、字符串操作\n\n　　（1）**strlen()函数返回值，不包含'\\0'。**\n\n　　（2）**sizeof()函数的返回值，如果传入sizeof函数的参数为数组名，则返回数组的定义时的长度；如果为指针，则范围指针占用的字节数。**另外，**给函数传递参数的时候，数组名将退化为指针，即使将函数声明为```fun(char a[])```,在fun()函数内部a也将退化为指针，函数内sizeof(a)的值仍然是4或者8。**", 
    "create_time": "2015年9月10日", 
    "preview": "\n![C](/static/blog/img/project/20150910/2015091001.jpg)\n\n　　尽管C语言作为绝大多数开发者学习的第一门编程语言，但它非常难以掌握是一个不争的事实。抛开高深精妙的指针、结构体等用法不谈，单是最基础的数据的操作，也暗藏诸多陷阱。下面简单总结一些易犯的错误和解决办法。\n", 
    "id": 20150910
}