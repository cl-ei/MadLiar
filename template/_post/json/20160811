{
    "category": "学习笔记", 
    "layout": "post", 
    "tags": [
        "编程 Python"
    ], 
    "title": "借助Nginx+uWSGI，部署Django项目到生产环境", 
    "first_figure": "/static/blog/img/project/20160811/0.jpg", 
    "content": "<img src=\"/static/blog/img/project/20160811/0.jpg\" alt=\"django\" style=\"width:100%;\"/>\n\n　　Django项目不像PHP等有着好用的LNMP一键安装包，并且由于Django版本更新迭代较快，版本间有诸多不兼容，导致部署到生产服务器的这一工作变得比较棘手。我在网上找了各种教程，大多是7、8年前甚至十几年前的例子，几乎不可用。折腾了一番，最终在Django中国社区找到一篇比较新的帖子，并照着教程终于部署成功。\n<!--more-->\n　　于是对照此帖进行整理，留备复阅。点此访问原帖：\n\n　　· <a  target='_blank'href=\"http://www.django-china.cn/topic/101/\">五步教你实现使用Nginx+uWSGI+Django方法部署Django程序（上）</a><br />　　· <a  target='_blank'href=\"http://www.django-china.cn/topic/124/\">五步教你实现使用Nginx+uWSGI+Django方法部署Django程序（下）</a> \n\n　　我使用的环境是：\n\n* Ubuntu 16.04 LTS\n* Django 1.9.4\n* python 2.7.11\n* nginx  1.10.0\n* uwsgi  2.0.13.1\n\n一、安装Django，使其能正常工作。此处创建一个名为webapp的Django项目，目录树为：\n```\n/\n└── home\n    ├── wwwroot\n    │   └── webapp\n            ├── manage.py\n            ├── webapp\n            │   └── ...            \n            ...\n...\n```\n　　此时在工程根目录/home/wwwroot/webapp/下运行```python manage.py runserver 0.0.0.0:8000```，访问服务器（端口号8000）可以看到Django默认的首页。\n\n二、安装pip。Ubuntu使用命令```apt install python-pip```即可。\n\n三、安装uWSGI。 \n```\nexport LDFLAGS=\"-Xlinker --no-as-needed\"\npip install uwsgi\n```\n　　这一步是最坑的。之前使用debian7 32位的系统，使用pip安装完成之后，运行uWSGI竟然说找不到命令。于是使用apt-get安装，有多个包可选，我选择了uwsgi、uwsgi-core、uwsgi-plugin-python三个包，多次试验最后始终遇到一个问题，就是运行时报错：\n```\nuwsgi: option ...\n    getopt_long() error.\n```\n　　多篇帖子指明，此类错误是因为没有安装libxml库导致，因此我重新安装libxml2，结果依然报错。个人臆断（没有任何根据）getopt_long()可能跟机子的位数有关，于是打算安一个64位的系统再试试。换上Ubuntu 16.04，重新执行上述步骤，没有再报错。\n\n四、测试uWSGI\n\n　　在某个目录创建下述文件，保存为test.py。然后shell执行```uwsgi --http :8001 --wsgi-file test.py```命令。不要怀疑你看错了或者我写错了，参数确实是```--wsgi-file```。\n\n```\ndef application(env, start_response):\n    start_response('200 OK', [('Content-Type','text/html')])\n    return \"Hello World\"\n```\n　　如果此时访问服务器（端口号8001），返回“hello world”则uWSGI正常运作。\n\n五、配置Django\n\n　　原帖的做法是在Django工程根目录下创建django_wsgi.py，但对于1.9.4版本的django来讲，这一步不需要。它已经自动生成了wsgi.py，保存在工程根目录下跟工程同名的文件夹中，对于此例，它位于：/home/wwwroot/webapp/webapp/。所以直接执行```uwsgi --http :8000 --chdir /home/wwwroot/webapp/ --module webapp.uwsgi```。若一切正常，访问服务器（端口号8000），就能看到django默认的首页。\n\n六、配置uWSGI\n\n　　在工程根目录下创建djangochina_socket.xml。文件名可以随意起。uWSGI启动时将读取此配置文件，与nginx协同工作。\n```\n<uwsgi>\n    <socket>:8077</socket>\n    <chdir>/home/wwwroot/webapp/</chdir>\n    <module>webapp.wsgi</module>\n    <processes>1</processes>\n    <daemonize>uwsgi.log</daemonize>\n</uwsgi>\n```\n　　参数的含义：\n\n- socket： nginx与uWSGI通信的端口号\n- chdir: Django工程根目录\n- module：指定uwsgi文件\n- processes：同时处理进程数\n- daemonize：日志文件\n\n七、配置nginx\n\n　　Ubuntu下使用apt安装nginx，默认配置文件在/etc/nginx/nginx.conf。编辑该文件：\n\n```\nserver {\n        \n        # web服务端口号\n        listen   80;\n\n        # 域名\n        server_name caoliang.net;\n\n        # 日志文件\n        access_log /home/log/access.log;\n        error_log /home/log/error.log;\n\n        location / {\n            include        uwsgi_params;\n\n            # 与uWSGI通信的端口号\n            uwsgi_pass     127.0.0.1:8077;\n        }\n\n        error_page  404              /404.html;\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # 静态文件路径\n        location /static/ {\n            alias  /home/wwwroot/webapp/books/static/;\n            index  index.html index.htm;\n        }\n\n        # media文件路径\n        location /media/ {\n            alias  /home/work/src/sites/testdjango1/testdjango/public/media/;\n        }\n}\n```\n\n八、运行\n\n　　运行```nginx -s  reload```重新载入nginx配置文件。然后启动uWSGI：```uwsgi -x /home/wwwroot/webapp/djangochina_socket.xml```。访问域名，正常的话就可以看到Django的默认首页了。\n\n　　结束uWSGI只需杀死进程即可。上传html和静态文件到服务器，不需要重启django服务。此时需要做的就是关闭Django的Debug模式，以免暴露敏感信息。\n\n　　再次感谢<a href=\"http://www.django-china.cn/user/1/\" target='_blank'>Django中国社区</a>。\n", 
    "create_time": "2016年8月11日", 
    "preview": "<img src=\"/static/blog/img/project/20160811/0.jpg\" alt=\"django\" style=\"width:100%;\"/>\n\n　　Django项目不像PHP等有着好用的LNMP一键安装包，并且由于Django版本更新迭代较快，版本间有诸多不兼容，导致部署到生产服务器的这一工作变得比较棘手。我在网上找了各种教程，大多是7、8年前甚至十几年前的例子，几乎不可用。折腾了一番，最终在Django中国社区找到一篇比较新的帖子，并照着教程终于部署成功。\n", 
    "id": 20160811
}